name: Release
on:
  push:
    branches: [main]
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
jobs:
  # 🔍 Detect if release is needed using cocogitto
  detect-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.set-outputs.outputs.should-release }}
      version: ${{ steps.set-outputs.outputs.version }}
      tag: ${{ steps.set-outputs.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Check if release needed
        id: check
        uses: cocogitto/cocogitto-action@v4
        with:
          dry-run: true
        continue-on-error: true
      - name: Set release outputs
        id: set-outputs
        run: |
          if [ "${{ steps.check.outcome }}" = "success" ] && [ -n "${{ steps.check.outputs.version }}" ]; then
            # Cocogitto outputs version with 'v' prefix (e.g., v0.7.0)
            VERSION_WITH_V="${{ steps.check.outputs.version }}"
            VERSION_WITHOUT_V="${VERSION_WITH_V#v}"  # Strip 'v' prefix

            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION_WITHOUT_V" >> $GITHUB_OUTPUT  # Clean version without 'v'
            echo "tag=$VERSION_WITH_V" >> $GITHUB_OUTPUT         # Tag with 'v' prefix
            echo "✅ Release will be created for version $VERSION_WITH_V"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "version=" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
            echo "ℹ️ No release needed"
          fi
  # 🏗️ Build artifacts with updated version files (after release creation)
  build-artifacts:
    needs: [detect-release, create-release]
    if: needs.detect-release.outputs.should-release == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-ai-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-ai-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: git-ai-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: git-ai-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: git-ai-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout (specific tag with version updates)
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.create-release.outputs.tag }} # Use the exact tag commit with version updates
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Setup cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build optimized binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/git-ai ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/git-ai.exe ${{ matrix.name }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          if-no-files-found: error
  # 🚀 Create release using cocogitto automation (parallel with build)
  create-release:
    needs: [detect-release]
    if: needs.detect-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install cargo-edit for hooks
        run: cargo install cargo-edit
      - name: Create release with cocogitto
        id: release
        uses: cocogitto/cocogitto-action@v4
        with:
          release: true
          git-user: "github-actions[bot]"
          git-user-email: "github-actions[bot]@users.noreply.github.com"
      - name: Push version changes and tag to repository
        run: |
          # Push the commit with version changes
          git push origin main
          # Push the tag
          TAG=$(git describe --tags --abbrev=0)
          git push origin $TAG
          echo "✅ Pushed version changes and tag: $TAG to repository"
      - name: Get created tag
        id: get-tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "✅ Created release tag: $TAG"
  # 📦 Publish GitHub release with artifacts
  publish-release:
    needs: [detect-release, build-artifacts, create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout (get updated CHANGELOG.md)
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.create-release.outputs.tag }} # Get the tag with updated changelog
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: Extract changelog content for release
        id: changelog
        run: |
          TAG="${{ needs.create-release.outputs.tag }}"

          # Extract the changelog section for this version from CHANGELOG.md
          # Find the section starting with "## $TAG" and ending before the next "## "
          CHANGELOG_CONTENT=$(awk "/^## $TAG/,/^## [^#]/ {
            if (/^## [^#]/ && !/^## $TAG/) exit;
            if (!/^## $TAG/) print;
          }" CHANGELOG.md | sed '/^$/d' | head -n -1)

          # Fallback if no content found
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT="Changes and improvements in this release. See [CHANGELOG.md](https://github.com/mattstruble/git-ai/blob/$TAG/CHANGELOG.md) for full details."
          fi

          # Output for GitHub Actions (handle multiline)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "✅ Extracted changelog content for $TAG"
      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -name "git-ai*" -type f -exec cp {} release/ \;
          cd release
          sha256sum * > checksums.txt
          ls -la
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          name: Release ${{ needs.create-release.outputs.tag }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.content }}

            ## Installation

            ### Download Binary
            Download the appropriate binary for your platform from the assets below.

            ### Homebrew (macOS)
            ```bash
            brew tap mattstruble/formulae
            brew install git-ai
            ```

            ### Nix
            ```bash
            nix profile install github:mattstruble/git-ai
            ```

            ### Cargo
            ```bash
            cargo install git-ai
            ```

            ## Checksums

            See `checksums.txt` for SHA256 checksums of all binaries.
          files: release/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
