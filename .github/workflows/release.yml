name: Release
on:
  push:
    branches: [main]
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
jobs:
  # Analyze commits to determine if a release should be created
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.set-release.outputs.should-release }}
      new-version: ${{ steps.set-release.outputs.new-version }}
      changelog: ${{ steps.version.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for conventional commits and determine version
        id: version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
          default_bump: false
          custom_release_rules: |
            feat:minor,fix:patch,docs:patch,style:patch,refactor:patch,perf:patch,test:patch
      
      - name: Debug version outputs  
        run: |
          echo "Debug: All step outputs:"
          echo "new_tag: '${{ steps.version.outputs.new_tag }}'"
          echo "new_version: '${{ steps.version.outputs.new_version }}'"
          echo "previous_tag: '${{ steps.version.outputs.previous_tag }}'"
          echo "changelog: '${{ steps.version.outputs.changelog }}'"
      
      - name: Set release flag
        id: set-release
        run: |
          # The action outputs new_tag (with v prefix) not new_version
          NEW_TAG="${{ steps.version.outputs.new_tag }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          echo "Raw NEW_TAG: '$NEW_TAG'"
          echo "Raw NEW_VERSION: '$NEW_VERSION'"
          
          # Use new_tag and strip 'v' prefix if present, fallback to new_version  
          if [ -n "$NEW_TAG" ]; then
            VERSION=${NEW_TAG#v}  # Remove 'v' prefix if present
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "new-version=$VERSION" >> $GITHUB_OUTPUT
            echo "Release should be created for version $VERSION (from new_tag: $NEW_TAG)"
          elif [ -n "$NEW_VERSION" ]; then
            VERSION=${NEW_VERSION#v}  # Remove 'v' prefix if present
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "new-version=$VERSION" >> $GITHUB_OUTPUT
            echo "Release should be created for version $VERSION (from new_version: $NEW_VERSION)"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "new-version=" >> $GITHUB_OUTPUT
            echo "No release needed - no version detected"
          fi
  # Build binaries for multiple platforms
  build:
    needs: [check-release, update-versions]
    if: needs.check-release.outputs.should-release == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-ai-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-ai-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: git-ai-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: git-ai-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: git-ai-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update-versions.outputs.commit-sha || github.sha }}
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Setup cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/git-ai ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/git-ai.exe ${{ matrix.name }}
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          if-no-files-found: error
  # Update version numbers and changelog
  update-versions:
    needs: [check-release]
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      commit-sha: ${{ steps.commit-changes.outputs.commit-sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Update Cargo.toml version
        run: |
          NEW_VERSION="${{ needs.check-release.outputs.new-version }}"
          echo "Updating Cargo.toml to version $NEW_VERSION"
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          echo "Updated Cargo.toml:"
          grep "^version = " Cargo.toml
      
      - name: Update main.rs version
        run: |
          NEW_VERSION="${{ needs.check-release.outputs.new-version }}"
          echo "Updating main.rs to version $NEW_VERSION"
          sed -i "s/#\[command(version = \".*\")\]/#[command(version = \"$NEW_VERSION\")]/" src/main.rs
          echo "Updated main.rs:"
          grep "#\[command(version = " src/main.rs
      
      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ needs.check-release.outputs.new-version }}"
          RELEASE_DATE=$(date +%Y-%m-%d)
          echo "Updating CHANGELOG.md for version $NEW_VERSION on $RELEASE_DATE"
          
          # Create a temporary file for the new changelog
          cat > temp_changelog.md << EOF
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          ## [Unreleased]

          EOF
          
          # Add the content from the current unreleased section and replace it with the new version
          awk '
            /^## \[Unreleased\]/ { 
              in_unreleased = 1
              next 
            }
            /^## \[/ && in_unreleased { 
              print "## ['"$NEW_VERSION"'] - '"$RELEASE_DATE"'"
              print ""
              print unreleased_content
              in_unreleased = 0
              print $0
              next
            }
            in_unreleased {
              if ($0 != "" || unreleased_content != "") {
                unreleased_content = unreleased_content $0 "\n"
              }
              next
            }
            { print }
          ' CHANGELOG.md >> temp_changelog.md
          
          # Replace the original changelog
          mv temp_changelog.md CHANGELOG.md
          
          echo "Updated CHANGELOG.md:"
          head -20 CHANGELOG.md
      
      - name: Commit version updates
        id: commit-changes
        run: |
          git add Cargo.toml src/main.rs CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "commit-sha=" >> $GITHUB_OUTPUT
          else
            git commit -m "chore: bump version to ${{ needs.check-release.outputs.new-version }}"
            git push origin main
            echo "commit-sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "Committed version updates"
          fi

  # Create the GitHub release
  release:
    needs: [check-release, build, update-versions]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.update-versions.outputs.commit-sha || github.sha }}
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts to release directory
        run: |
          mkdir -p release
          find artifacts -name "git-ai*" -type f -exec cp {} release/ \;
          ls -la release/
      - name: Create checksums
        run: |
          cd release
          sha256sum * > checksums.txt
          cat checksums.txt
      - name: Create GitHub Release
        id: create_release
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_release_rules: |
            feat:minor,fix:patch,docs:patch,style:patch,refactor:patch,perf:patch,test:patch
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_release.outputs.new_tag }}
          name: Release ${{ steps.create_release.outputs.new_tag }}
          body: |
            ## Changes

            ${{ steps.create_release.outputs.changelog }}

            ## Installation

            ### Download Binary
            Download the appropriate binary for your platform from the assets below.

            ### Homebrew (macOS)
            ```bash
            brew install mattstruble/git-ai/git-ai
            ```

            ### Nix
            ```bash
            nix profile install github:mattstruble/git-ai
            ```

            ### Cargo
            ```bash
            cargo install git-ai
            ```

            ## Checksums

            See `checksums.txt` for SHA256 checksums of all binaries.
          files: |
            release/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
