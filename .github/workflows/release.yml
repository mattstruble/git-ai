name: Release
on:
  push:
    branches: [main]
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
jobs:
  # Use cocogitto to check if a release should be created
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.final-outputs.outputs.should-release }}
      new-version: ${{ steps.final-outputs.outputs.new-version }}
      new-tag: ${{ steps.final-outputs.outputs.new-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install cocogitto
        run: |
          curl -L https://github.com/cocogitto/cocogitto/releases/latest/download/cog-linux-x86_64.tar.gz | tar xz
          sudo mv cog /usr/local/bin/
          cog --version

      - name: Check conventional commits
        id: check-commits
        run: |
          # First check if we have any conventional commits since the latest tag
          if ! cog check --from-latest-tag 2>/dev/null; then
            echo "❌ Conventional commit check failed or no commits since latest tag"
            echo "has-commits=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Conventional commits found since latest tag"
            echo "has-commits=true" >> $GITHUB_OUTPUT
          fi

      - name: Check if bump needed
        id: check-bump
        if: steps.check-commits.outputs.has-commits == 'true'
        run: |
          # Check what version would be bumped to using cocogitto
          VERSION_OUTPUT=$(cog bump --dry-run 2>&1 || echo "NO_BUMP_NEEDED")

          echo "Cog bump output:"
          echo "$VERSION_OUTPUT"

          if echo "$VERSION_OUTPUT" | grep -q "No conventional commit found\|NO_BUMP_NEEDED"; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "No version bump needed - no relevant conventional commits found"
          else
            # Try to extract version from output (cocogitto outputs "v1.2.3" format)
            NEW_VERSION=$(echo "$VERSION_OUTPUT" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
            if [ -n "$NEW_VERSION" ]; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "new-version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT  # Remove 'v' prefix
              echo "new-tag=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "✅ Release should be created for version $NEW_VERSION"
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
              echo "Could not determine new version from cog output"
            fi
          fi

      - name: Set final outputs
        id: final-outputs
        run: |
          # Set final outputs based on previous steps
          if [ "${{ steps.check-commits.outputs.has-commits }}" != "true" ]; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "new-version=" >> $GITHUB_OUTPUT
            echo "new-tag=" >> $GITHUB_OUTPUT
          else
            echo "should-release=${{ steps.check-bump.outputs.should-release || 'false' }}" >> $GITHUB_OUTPUT
            echo "new-version=${{ steps.check-bump.outputs.new-version || '' }}" >> $GITHUB_OUTPUT
            echo "new-tag=${{ steps.check-bump.outputs.new-tag || '' }}" >> $GITHUB_OUTPUT
          fi
  # Build binaries for multiple platforms
  build:
    needs: [check-release, update-versions]
    if: needs.check-release.outputs.should-release == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-ai-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: git-ai-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: git-ai-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: git-ai-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: git-ai-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.update-versions.outputs.commit-sha || github.sha }}
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Setup cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/git-ai ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/git-ai.exe ${{ matrix.name }}
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          if-no-files-found: error
  # Use cocogitto to bump version and update changelog
  update-versions:
    needs: [check-release]
    if: needs.check-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      commit-sha: ${{ steps.cog-release.outputs.commit-sha }}
      version: ${{ steps.cog-release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Cargo.toml version manually (pre-bump)
        run: |
          NEW_VERSION="${{ needs.check-release.outputs.new-version }}"
          if [ -n "$NEW_VERSION" ]; then
            echo "Updating Cargo.toml to version $NEW_VERSION"
            sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          fi

      - name: Update main.rs version manually (pre-bump)
        run: |
          NEW_VERSION="${{ needs.check-release.outputs.new-version }}"
          if [ -n "$NEW_VERSION" ]; then
            echo "Updating main.rs to version $NEW_VERSION"
            sed -i "s/#\[command(version = \".*\")\]/#[command(version = \"$NEW_VERSION\")]/" src/main.rs
          fi

      - name: Commit version file updates
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add Cargo.toml src/main.rs
          if ! git diff --staged --quiet; then
            git commit -m "chore: update version files"
          fi

      - name: Release with cocogitto
        id: cog-release
        uses: cocogitto/cocogitto-action@v3
        with:
          release: true
          git-user: "github-actions[bot]"
          git-user-email: "github-actions[bot]@users.noreply.github.com"

  # Create the GitHub release
  release:
    needs: [check-release, build, update-versions]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ needs.update-versions.outputs.commit-sha || github.sha }}
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: Move artifacts to release directory
        run: |
          mkdir -p release
          find artifacts -name "git-ai*" -type f -exec cp {} release/ \;
          ls -la release/
      - name: Create checksums
        run: |
          cd release
          sha256sum * > checksums.txt
          cat checksums.txt
      - name: Get latest tag for release
        id: get-tag
        run: |
          # The cocogitto action should have created a tag, get the latest one
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Using tag: $LATEST_TAG"

      - name: Generate changelog for release
        id: changelog
        run: |
          # Install cocogitto to generate changelog
          curl -L https://github.com/cocogitto/cocogitto/releases/latest/download/cog-linux-x86_64.tar.gz | tar xz
          sudo mv cog /usr/local/bin/

          # Generate changelog for the latest version
          LATEST_TAG="${{ steps.get-tag.outputs.tag }}"
          CHANGELOG_CONTENT=$(cog changelog --at "$LATEST_TAG" --template default || echo "Release $LATEST_TAG")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-tag.outputs.tag }}
          name: Release ${{ steps.get-tag.outputs.tag }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ### Download Binary
            Download the appropriate binary for your platform from the assets below.

            ### Homebrew (macOS)
            ```bash
            brew tap mattstruble/formulae
            brew install git-ai
            ```

            ### Nix
            ```bash
            nix profile install github:mattstruble/git-ai
            ```

            ### Cargo
            ```bash
            cargo install git-ai
            ```

            ## Checksums

            See `checksums.txt` for SHA256 checksums of all binaries.
          files: |
            release/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
